# syntax=docker/dockerfile:1

# Base image with explicit platform targeting
FROM --platform=$BUILDPLATFORM node:20.17.0-alpine AS base

# Stage 1: Dependencies
FROM base AS deps
RUN apk add --no-cache libc6-compat g++ make python3
WORKDIR /app

# Configure npm
RUN npm config set fetch-retries 5 && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000

COPY package.json package-lock.json* yarn.lock* pnpm-lock.yaml* ./

# Install dependencies
RUN \
  if [ -f yarn.lock ]; then \
    yarn global add yarn@latest && \
    yarn install --frozen-lockfile --production=false; \
  elif [ -f package-lock.json ]; then \
    npm ci; \
  elif [ -f pnpm-lock.yaml ]; then \
    yarn global add pnpm && \
    pnpm install --frozen-lockfile; \
  else \
    echo "Lockfile not found." && exit 1; \
  fi

# Stage 2: Builder
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

ENV NEXT_TELEMETRY_DISABLED=1

# Install sharp with proper platform detection
RUN npm install sharp --platform=linuxmusl-$(uname -m)

# Build the application
RUN yarn build

# Stage 3: Runner
FROM node:20.17.0-alpine AS runner
WORKDIR /app

RUN npm install sharp --platform=linuxmusl-$(uname -m)
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY google9490cfd647128d40.html ./public

USER nextjs

EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "server.js"]
